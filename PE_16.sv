// Generated by CIRCT firtool-1.75.0

module PE_16(	
  input         clock,	
  input  [7:0]  io_in_a,	
  input  [19:0] io_in_b,	
  input  [19:0] io_in_d,	
  output [7:0]  io_out_a,	
  output [19:0] io_out_b,	
  output [19:0] io_out_c,	
  input         io_in_control_dataflow,	
  input         io_in_control_propagate,	
  input  [4:0]  io_in_control_shift,	
  output        io_out_control_dataflow,	
  output        io_out_control_propagate,	
  output [4:0]  io_out_control_shift,	
  input  [2:0]  io_in_id,	
  output [2:0]  io_out_id,	
  input         io_in_last,	
  output        io_out_last,
  input         io_in_valid,
  output        io_out_valid
);

  wire [19:0] _mac_unit_io_out_d;
  reg  [31:0] c1 = 0;	
  reg  [31:0] c2 = 0;	
  reg         last_s;	
  wire [4:0]  shift_offset = last_s == io_in_control_propagate ? 5'h0 : io_in_control_shift;	
  wire [31:0] _GEN = {27'h0, shift_offset - 5'h1};	
  wire [31:0] _io_out_c_point_five_T_3 = $signed($signed(c1) >>> _GEN);	// @[generators/gemmini/src/main/scala/gemmini/Arithmetic.scala:101:50, generators/gemmini/src/main/scala/gemmini/PE.scala:70:15]
  wire [31:0] _GEN_0 = {27'h0, shift_offset};	// @[generators/gemmini/src/main/scala/gemmini/Arithmetic.scala:101:50, :103:30, generators/gemmini/src/main/scala/gemmini/PE.scala:90:21, :91:25]
  wire [31:0] _io_out_c_T = $signed($signed(c1) >>> _GEN_0);	// @[generators/gemmini/src/main/scala/gemmini/Arithmetic.scala:103:30, generators/gemmini/src/main/scala/gemmini/PE.scala:70:15]
  wire [31:0] _io_out_c_T_2 = _io_out_c_T + {31'h0, (|shift_offset) & _io_out_c_point_five_T_3[0] & ((|(shift_offset < 5'h2 ? 32'h0 : c1 & (32'h1 << _GEN) - 32'h1)) | _io_out_c_T[0])};	// @[generators/gemmini/src/main/scala/gemmini/Arithmetic.scala:101:{29,32,50}, :102:{24,27,52,60,81,89}, :103:30, :105:{29,38}, :107:28, generators/gemmini/src/main/scala/gemmini/PE.scala:70:15, :90:21, :91:25]
  wire [31:0] _GEN_1 = {27'h0, shift_offset - 5'h1};	// @[generators/gemmini/src/main/scala/gemmini/Arithmetic.scala:101:{50,53}, generators/gemmini/src/main/scala/gemmini/PE.scala:90:21, :91:25]
  wire [31:0] _io_out_c_point_five_T_8 = $signed($signed(c2) >>> _GEN_1);	// @[generators/gemmini/src/main/scala/gemmini/Arithmetic.scala:101:50, generators/gemmini/src/main/scala/gemmini/PE.scala:71:15]
  wire [31:0] _io_out_c_T_11 = $signed($signed(c2) >>> _GEN_0);	// @[generators/gemmini/src/main/scala/gemmini/Arithmetic.scala:103:30, generators/gemmini/src/main/scala/gemmini/PE.scala:71:15]
  wire [31:0] _io_out_c_T_13 = _io_out_c_T_11 + {31'h0, (|shift_offset) & _io_out_c_point_five_T_8[0] & ((|(shift_offset < 5'h2 ? 32'h0 : c2 & (32'h1 << _GEN_1) - 32'h1)) | _io_out_c_T_11[0])};	// @[generators/gemmini/src/main/scala/gemmini/Arithmetic.scala:101:{29,32,50}, :102:{24,27,52,60,81,89}, :103:30, :105:{29,38}, :107:28, generators/gemmini/src/main/scala/gemmini/PE.scala:71:15, :90:21, :91:25]
  wire [31:0] _GEN_2 = {{12{_mac_unit_io_out_d[19]}}, _mac_unit_io_out_d};	

  always @(posedge clock) begin	
    if (io_in_valid) begin	
      c1 <= io_in_control_propagate ? {{12{io_in_d[19]}}, io_in_d} : _GEN_2;	
      c2 <= io_in_control_propagate ? _GEN_2 : {{12{io_in_d[19]}}, io_in_d};	
      last_s <= io_in_control_propagate;	
    end
  end // always @(posedge)

  MacUnit mac_unit (	
    .io_in_a  (io_in_a),
    .io_in_b  (io_in_b[7:0]),	
    .io_in_c  (io_in_control_propagate ? c2 : c1),	
    .io_out_d (_mac_unit_io_out_d)
  );	

  assign io_out_a = io_in_a;	
  assign io_out_b = io_in_b;	
  assign io_out_c = io_in_control_propagate ? ($signed(_io_out_c_T_2) > 32'sh7FFFF ? 20'h7FFFF : $signed(_io_out_c_T_2) < -32'sh80000 ? 20'h80000 : _io_out_c_T_2[19:0]) : $signed(_io_out_c_T_13) > 32'sh7FFFF ? 20'h7FFFF : $signed(_io_out_c_T_13) < -32'sh80000 ? 20'h80000 : _io_out_c_T_13[19:0];	// @[generators/gemmini/src/main/scala/gemmini/Arithmetic.scala:107:28, :125:{33,60}, generators/gemmini/src/main/scala/gemmini/PE.scala:31:7, :103:30, :104:16, :111:16, src/main/scala/chisel3/util/Mux.scala:126:16]
  assign io_out_control_dataflow = io_in_control_dataflow;	
  assign io_out_control_propagate = io_in_control_propagate;
  assign io_out_control_shift = io_in_control_shift;	
  assign io_out_id = io_in_id;	
  assign io_out_last = io_in_last;	
  assign io_out_valid = io_in_valid;
endmodule

